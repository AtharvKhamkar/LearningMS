// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String
  fullname     String
  email        String   @unique
  password     String
  avatar       String?
  coverImage   String?
  role         UserRole @default(STUDENT)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  course       Course[]
  review       Review[]
  rating       Rating[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model Course {
  id           String         @id @default(uuid())
  instructor   User           @relation(fields: [instructorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instructorId String
  title        String         @unique
  description  String
  duration     CourseDuration
  price        Int?           @default(0)
  published    Boolean        @default(false)
  ratings      Int?           @default(0)
  reviews      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  content      Content[]
  review       Review[]
  rating       Rating[]
}

enum CourseDuration {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  TWELVE_MONTHS
}

model Content {
  id          String   @id @default(uuid())
  course      Course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course_id   String
  title       String
  description String?
  thumbnail   String?
  video       String?
  duration    Int?
  views       Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course_id String
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id   String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id String
  user      User     @relation(fields: [user_id], references: [id], onUpdate: Cascade)
  user_id   String
  stars     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
